
dnl############################################################
dnl##                   SYMBOS_CRT.M4                        ##
dnl############################################################
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                  symbos standard model                    ;;
;;     generated by target/symbos/startup/symbos_crt.m4      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CRT AND CLIB CONFIGURATION ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

include "../crt_defaults.inc"
include "crt_target_defaults.inc"
include "../crt_rules.inc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SET UP MEMORY MODEL ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

include "memory_model.inc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GLOBAL SYMBOLS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

include "../clib_constants.inc"
include "clib_target_constants.inc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; INSTANTIATE DRIVERS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
dnl
dnl############################################################
dnl## LIST OF AVAILABLE DRIVERS WITH STATIC INSTANTIATORS #####
dnl############################################################
dnl
dnl## input terminals
dnl
dnl## output terminals
dnl
dnl## file dup
dnl
dnl#include(../../m4_file_dup.m4)dnl
dnl
dnl## empty fd slot
dnl
dnl#include(../../m4_file_absent.m4)dnl
dnl
dnl############################################################
dnl## INSTANTIATE DRIVERS #####################################
dnl############################################################
dnl

include(../../clib_instantiate_begin.m4)
include(../../clib_instantiate_end.m4)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; HEADER ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SECTION AREA_HEADER

; symbos header is located at address 0x0000

EXTERN ASMHEAD_AREA_CODE_END, ASMHEAD_AREA_CODE, ASMHEAD_AREA_DATA_END
EXTERN ASMHEAD_AREA_DATA, ASMHEAD_AREA_TRANSFER_END, ASMHEAD_AREA_TRANSFER
EXTERN ASMHEAD_AREA_CODE_RESERVED_END, ASMHEAD_AREA_CODE_RESERVED
EXTERN ASMHEAD_AREA_DATA_RESERVED_END, ASMHEAD_AREA_DATA_RESERVED
EXTERN ASMHEAD_AREA_TRANSFER_RESERVED_END, ASMHEAD_AREA_TRANSFER_RESERVED

defw ASMHEAD_AREA_CODE_END - ASMHEAD_AREA_CODE                             ;; length of the code area
defw ASMHEAD_AREA_DATA_END - ASMHEAD_AREA_DATA                             ;; length of the data area
defw ASMHEAD_AREA_TRANSFER_END - ASMHEAD_AREA_TRANSFER                     ;; length of the transfer area
defw 0                                                                     ;; original ORG of assembler code
defw 0                                                                     ;; number of entries in the relocator table
defw __crt_stack_size                                                      ;; size of stack in bytes
defw 0                                                                     ;; length of crunched data      **NOT SUPPORTED YET**
defb 0                                                                     ;; cruncher type (0=uncrunched) **NOT SUPPORTED YET**
defm "Z88DK APPLICATION               "                                    ;; application name (32 bytes)
defb 0                                                                     ;; zero terminator
defm "SymExe10"                                                            ;; SymbOS executable identification
defw ASMHEAD_AREA_CODE_RESERVED_END - ASMHEAD_AREA_CODE_RESERVED           ;; length of reserved code memory
defw ASMHEAD_AREA_DATA_RESERVED_END - ASMHEAD_AREA_DATA_RESERVED           ;; length of reserved data memory
defw ASMHEAD_AREA_TRANSFER_RESERVED_END - ASMHEAD_AREA_TRANSFER_RESERVED   ;; length of reserved transfer memory
defs 26                                                                    ;; *RESERVED* (must be 0)
defb 0,2                                                                   ;; minimum OS version (minor,major)
defs 19                                                                    ;; application icon (small), 8x8 pixel symbos format
defs 147                                                                   ;; application icon (large), 24x24 pixel symbos format

IF ASMPC != 0x100
   "error: symbos header size incorrect"
ENDIF

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; STACK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SECTION AREA_TRANSFER

PUBLIC __symbos_proc_id, __symbos_message_buffer

   defs __crt_stack_size   ;; stack must appear first in transfer area
   defs 6*2                ;; register pre-definition
   defw __Start            ;; start address

__symbos_proc_id        :  defb 0   ;; process id
__symbos_message_buffer :  defs 14  ;; message buffer

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; STARTUP ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SECTION AREA_CODE

PUBLIC __Start, __Exit

EXTERN _main

__Start:

   di
   
   ; preserve exx set for symbos
   
   exx
   
   ld (symbos_exx_bc),bc
   ld (symbos_exx_de),de
   ld (symbos_exx_hl),hl
   push af
   pop hl
   ld (symbos_exx_af),hl
   
   exx

   ; place hooks into OS entry points




   ei

   ; parse command line
   
   IF __crt_enable_commandline
   
      EXTERN ASMHEAD_CODE_END, ASMHEAD_CODE
      EXTERN ASMHEAD_AREA_CODE_RESERVED_END, ASMHEAD_AREA_CODE_RESERVED
      
      EXTERN l_command_line_parse_in_place, asm_strnlen
      
      ld hl,(__symbos_code)
      ld bc,ASMHEAD_CODE_END - ASMHEAD_CODE + ASMHEAD_AREA_CODE_RESERVED_END - ASMHEAD_AREA_CODE_RESERVED
      
      add hl,bc                ; hl = & command line at end of static code area

      ld bc,255                ; bc = max len of command line
      call asm_strnlen

      ld c,l
      ld b,h                   ; bc = length of command line
      
      ex de,hl                 ; hl = & command line
      
      call l_command_line_parse_in_place
      
      exx
      
      ld a,h
      or l
      jr z, cl_skip_terminate
   
      ld (hl),0
   
   cl_skip_terminate:
      
      exx
      
      ; bc = int argc
      ; hl = char *argv[]

      IF __SDCC | __SDCC_IX | __SDCC_IY
      
         push hl               ; argv
         push bc               ; argc
      
      ELSE
      
         push bc               ; argc
         push hl               ; argv
      
      ENDIF

   ENDIF
   
SECTION code_crt_init          ; user and library initialization
SECTION code_crt_main

   ; call user program
   
   call _main                  ; hl = return status

   ; run exit stack

   IF __clib_exit_stack_size > 0
   
      EXTERN asm_exit
      jp asm_exit              ; exit function jumps to __Exit
   
   ENDIF

__Exit:

   push hl                     ; save return status

SECTION code_crt_exit          ; user and library cleanup
SECTION code_crt_return

   ; close files
   
   include "../clib_close.inc"

   ; exit program

   pop hl                      ; hl = return status
   
... return status?
... symshell exit?

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; RUNTIME VARS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SECTION code_crt_common

PUBLIC __symbos_header, __symbos_code_reserved
PUBLIC __symbos_data_reserved, __symbos_transfer_reserved

EXTERN ASMHEAD_AREA_HEADER, ASMHEAD_AREA_CODE_END
EXTERN ASMHEAD_AREA_DATA_END, ASMHEAD_AREA_TRANSFER_END

__symbos_header           :  defw ASMHEAD_AREA_HEADER
__symbos_code             :  defw ASMHEAD_AREA_CODE
__symbos_code_reserved    :  defw ASMHEAD_AREA_CODE_END
__symbos_data_reserved    :  defw ASMHEAD_AREA_DATA_END
__symbos_transfer_reserved:  defw ASMHEAD_AREA_TRANSFER_END

PUBLIC symbos_exx_af, symbos_exx_bc, symbos_exx_de, symbos_exx_hl

symbos_exx_af             :  defs 2
symbos_exx_bc             :  defs 2
symbos_exx_de             :  defs 2
symbos_exx_hl             :  defs 2

include "../clib_variables.inc"
include "clib_target_variables.inc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CLIB STUBS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

include "../clib_stubs.inc"
